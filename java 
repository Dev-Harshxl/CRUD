INSERT INTO items (title, description, image) VALUES
('Title 1', 'Description for item 1', NULL),
('Title 2', 'Description for item 2', NULL),
('Title 3', 'Description for item 3', NULL),
('Title 4', 'Description for item 4', NULL),
('Title 5', 'Description for item 5', NULL),
('Title 6', 'Description for item 6', NULL),
('Title 7', 'Description for item 7', NULL),
('Title 8', 'Description for item 8', NULL),
('Title 9', 'Description for item 9', NULL),
('Title 10', 'Description for item 10', NULL);


import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import ItemsTable from './ItemsTable'; // Your table component
import Feed from './Feed'; // Your Feed component (Create and Update form page)

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<ItemsTable />} />
        <Route path="/feed" element={<Feed />} />
        <Route path="/feed/:id" element={<Feed />} /> {/* For update with ID */}
      </Routes>
    </Router>
  );
}

export default App;




export const updateItem = async (id, item) => {
  const formData = new FormData();
  formData.append('title', item.title);
  formData.append('description', item.description);
  if (item.image) {
    formData.append('image', item.image); // Raw binary data
  }

  try {
    const response = await axios.put(`${API_BASE_URL}/${id}`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    return response.data;
  } catch (error) {
    console.error('Error updating item:', error);
    throw error;
  }
};

export const updateItem = async (id, item) => {
  const formData = new FormData();
  formData.append('title', item.title);
  formData.append('description', item.description);
  if (item.image) {
    formData.append('image', item.image); // Raw binary data
  }

  try {
    const response = await axios.put(`${API_BASE_URL}/${id}`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    return response.data;
  } catch (error) {
    console.error('Error updating item:', error);
    throw error;
  }
};



const handleSubmit = async (e) => {
  e.preventDefault();
  const formData = new FormData();
  formData.append("title", title);
  formData.append("description", description);
  if (image) {
    formData.append("image", image);
  }
  console.log([...formData.entries()]); // Debugging step
  try {
    if (id) {
      await updateItem(id, formData);
    } else {
      await createItem(formData);
    }
    navigate("/");
  } catch (error) {
    console.error("Error submitting form:", error);
  }
};




@PutMapping("/{id}")
public ResponseEntity<items> updateItem(
        @PathVariable Long id,
        @RequestParam("title") String title,
        @RequestParam("description") String description,
        @RequestParam(value = "image", required = false) MultipartFile image) {
    try {
        // Fetch the existing item by ID
        items existingItem = itemRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Item not found"));

        // Update fields
        existingItem.setTitle(title);
        existingItem.setDescription(description);

        if (image != null && !image.isEmpty()) {
            // Update image if provided
            byte[] imageBytes = image.getBytes();
            existingItem.setImage(imageBytes);
        }

        // Save the updated item to the database
        itemRepository.save(existingItem);

        // Return the updated item with status OK (200)
        return ResponseEntity.ok(existingItem);

    } catch (IOException e) {
        // Handle exceptions, e.g., image processing failure
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
    } catch (RuntimeException e) {
        // Handle item not found
        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
    }
}


@PutMapping("/{id}")
public ResponseEntity<items> updateItem(
    @PathVariable Long id,
    @RequestParam("title") String title,
    @RequestParam("description") String description,
    @RequestParam(value = "image", required = false) MultipartFile image) {
    try {
        // Retrieve the existing item
        items existingItem = itemRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Item not found"));

        // Update title and description
        existingItem.setTitle(title);
        existingItem.setDescription(description);

        // Update image only if it's provided
        if (image != null && !image.isEmpty()) {
            existingItem.setImage(image.getBytes()); // Save raw binary data
        }

        // Save updated item
        itemRepository.save(existingItem);
        return ResponseEntity.ok(existingItem);

    } catch (Exception e) {
        e.printStackTrace(); // Log the error for debugging
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
    }
}

@PostMapping
public ResponseEntity<items> createItem(
    @RequestParam("title") String title,
    @RequestParam("description") String description,
    @RequestParam(value = "image", required = false) MultipartFile image) {
    try {
        // Create new item
        items newItem = new items();

        newItem.setTitle(title);
        newItem.setDescription(description);

        // Handle image if provided
        if (image != null && !image.isEmpty()) {
            newItem.setImage(image.getBytes()); // Save raw binary data
        }

        // Save the item to the database
        itemRepository.save(newItem);

        return ResponseEntity.status(HttpStatus.CREATED).body(newItem);

    } catch (Exception e) {
        e.printStackTrace(); // Log the error for debugging
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
    }
}

const createItem = async (item) => {
  const formData = new FormData();
  formData.append('title', item.title);
  formData.append('description', item.description);
  if (item.image) {
    formData.append('image', item.image); // Raw binary data
  }

  try {
    const response = await axios.post(API_BASE_URL, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    return response.data;
  } catch (error) {
    console.error('Error creating item:', error);
    throw error;
  }
};

const updateItem = async (id, item) => {
  const formData = new FormData();
  formData.append('title', item.title);
  formData.append('description', item.description);
  if (item.image) {
    formData.append('image', item.image); // Raw binary data
  }

  try {
    const response = await axios.put(`${API_BASE_URL}/${id}`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    return response.data;
  } catch (error) {
    console.error('Error updating item:', error);
    throw error;
  }
};

